create table 
  notes (
    id uuid not null default gen_random_uuid (),
    counter bigint generated by default as identity not null,
    title text null,
    note text null,
    created_at timestamp with time zone null default now(),
    updated_at timestamp with time zone null default now(),
    deleted_at timestamp with time zone null,
    status text null default 'published'::text,
    is_private boolean null default false,
    user_id uuid not null default auth.uid (),
    constraint notes_pkey primary key (id),
    constraint notes_user_id_fkey foreign key (user_id) references auth.users (id) on update cascade on delete cascade
  ) tablespace pg_default;


-- Enable realtime
alter
  publication supabase_realtime add table notes;

-- Legend-State helper to facilitate "Sync only diffs" (changesSince: 'last-sync') mode
CREATE OR REPLACE FUNCTION handle_times()
    RETURNS trigger AS
    $$
    BEGIN
    IF (TG_OP = 'INSERT') THEN
        NEW.created_at := now();
        NEW.updated_at := now();
    ELSEIF (TG_OP = 'UPDATE') THEN
        NEW.created_at = OLD.created_at;
        NEW.updated_at = now();
    END IF;
    RETURN NEW;
    END;
    $$ language plpgsql;

CREATE TRIGGER handle_times
    BEFORE INSERT OR UPDATE ON notes
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();
